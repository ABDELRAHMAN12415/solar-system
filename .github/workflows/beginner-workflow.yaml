name: Solar System Workflow beginner

on:
  workflow_dispatch:

env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        continue-on-error: true
        run: npm test
    
      - name: Archive Test Result
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml


  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: unit-testing
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Docker Hub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/ga-application:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          # List built images
          docker images


          # Run the container in detached mode
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/ga-application:${{ github.sha }}
          # Wait for the container to start
          sleep 5


          # Display container IP address
          echo "Container IP:" $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)


          # Test the /live endpoint
          echo "Testing /live endpoint"
          wget -q -O - http://127.0.0.1:3000/live | grep live


  dev-deploy:
    name: Deploy to Dev Env
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install kubectl CLI
      uses: azure/setup-kubectl@v3
      with:
            version: 'latest'

    - name: Set Kubeconfig Context
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}

    - name: Fetch Kubernetes Cluster Details
      run: |
            kubectl version
            echo "-----------------------------------------"
            kubectl get nodes

    - name: Replace tokens in manifests
      uses: cschleiden/replace-tokens@v1
      with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files:
              kubernetes/development/*.yaml
      env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/ga-application:${{ github.sha }}


    - name: Show processed manifests
      run: cat kubernetes/development/*.yaml

    - name: Create Namespace if doesn't exist
      run: |
             kubectl get namespace ${{ vars.NAMESPACE }} || \
             kubectl create namespace ${{ vars.NAMESPACE }}

    - name: Create MongoDB secret
    run: |
      kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
        --from-literal=MONGO_URI="${{ env.MONGO_URI }}" \
        --from-literal=MONGO_USERNAME="${{ env.MONGO_USERNAME }}" \
        --from-literal=MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
        --save-config \
        --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy manifests
      run: kubectl apply -f kubernetes/development